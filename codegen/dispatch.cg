{-# LANGUAGE ConstraintKinds #-}
{-# LANGUAGE DefaultSignatures #-}
{-# LANGUAGE QuasiQuotes, TypeFamilies, TemplateHaskell #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE UndecidableInstances #-}
{-# LANGUAGE ViewPatterns #-}
{-# OPTIONS_GHC -fno-warn-orphans #-}
module Handler.~{moduleName m} 
    ( module Handler.~{moduleName m}.Enums, module Handler.~{moduleName m}.Internal, module Handler.~{moduleName m}.Routes ) where
import Handler.~{moduleName m}.Enums
import Handler.~{moduleName m}.Internal
~{concatMap routeImport (modRoutes m)}
import Handler.~{moduleName m}.Routes
import Yesod.Core
import Yesod.Auth
import Yesod.Persist
import Database.Esqueleto
import Prelude
type ~{moduleName m}Route = Route ~{moduleName m}
 
instance (YesodAuthPersist master,
          AuthId master ~ Key User,
          AuthEntity master ~Â User,
          YesodPersistBackend master ~ SqlBackend) => YesodSubDispatch ~{moduleName m} (HandlerT master IO) where
    yesodSubDispatch = $(mkYesodSubDispatch resources~{moduleName m})
